{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","fSubmit","e","preventDefault","console","log","datas","state","name","refs","value","address","act","data","push","index","setState","myForm","reset","focus","fRemove","i","splice","fEdit","title","this","className","ref","type","placeholder","onClick","Container","Row","md","sm","map","Col","key","Card","style","width","Img","variant","src","fluid","Body","Text","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAwHeA,E,kDA9Gb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAaRC,QAAU,SAACC,GACTA,EAAEC,iBACFC,QAAQC,IAAI,OAEZ,IAAIC,EAAQ,EAAKC,MAAMD,MACnBE,EAAO,EAAKC,KAAKD,KAAKE,MACtBC,EAAU,EAAKF,KAAKE,QAAQD,MAEhC,GAAsB,IAAnB,EAAKH,MAAMK,IAAU,CACtB,IAAIC,EAAO,CACTL,OAAMG,WAERL,EAAMQ,KAAKD,OACR,CACH,IAAIE,EAAQ,EAAKR,MAAMQ,MACvBT,EAAMS,GAAOP,KAAOA,EACpBF,EAAMS,GAAOJ,QAAUA,EAGzB,EAAKK,SAAS,CACZV,MAAOA,EACPM,IAAK,IAGP,EAAKH,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAvCC,EA0ClBC,QAAU,SAACC,GACT,IAAIf,EAAQ,EAAKC,MAAMD,MACvBA,EAAMgB,OAAOD,EAAE,GACf,EAAKL,SAAS,CACZV,MAAOA,IAGT,EAAKG,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAlDC,EAqDlBI,MAAQ,SAACF,GACP,IAAIR,EAAO,EAAKN,MAAMD,MAAMe,GAC5B,EAAKZ,KAAKD,KAAKE,MAAQG,EAAKL,KAC5B,EAAKC,KAAKE,QAAQD,MAAQG,EAAKF,QAE/B,EAAKK,SAAS,CACZJ,IAAK,EACLG,MAAOM,IAGT,EAAKZ,KAAKD,KAAKW,SA7Df,EAAKZ,MAAM,CACTiB,MAAO,uBACPZ,IAAK,EACLG,MAAO,GACPT,MAAO,IANO,E,gEAWhBmB,KAAKhB,KAAKD,KAAKW,U,+BAuDP,IAAD,OACHb,EAAQmB,KAAKlB,MAAMD,MACvB,OACE,yBAAKoB,UAAU,OACb,4BAAKD,KAAKlB,MAAMiB,OAChB,0BAAMG,IAAI,SAASD,UAAU,UAC3B,2BAAOE,KAAK,OAAOD,IAAI,OAAOE,YAAY,YAAYH,UAAU,cAChE,2BAAOE,KAAK,OAAOD,IAAI,UAAUE,YAAY,cAAcH,UAAU,cACrE,4BAAQI,QAAS,SAAC5B,GAAD,OAAK,EAAKD,QAAQC,IAAIwB,UAAU,YAAjD,YAGF,kBAACK,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACd5B,EAAM6B,KAAI,SAACtB,EAAMQ,GAAP,OAGZ,kBAACe,EAAA,EAAD,KACG,wBAAIC,IAAKhB,EAAGK,UAAU,UAGhB,kBAACY,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACxB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAK9B,EAAKL,KAAMoC,OAAK,IAC5C,kBAACN,EAAA,EAAKO,KAAN,KACC,kBAACP,EAAA,EAAKQ,KAAN,KACCjC,EAAKF,UAGV,4BAAQmB,QAAS,kBAAI,EAAKV,QAAQC,IAAIK,UAAU,gBAAhD,WACA,4BAAQI,QAAS,kBAAI,EAAKP,MAAMF,IAAIK,UAAU,gBAA9C,sB,GAhGIqB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.27731954.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from 'react-bootstrap/Card';\nimport Image from 'react-bootstrap/Image';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      title: 'Share your memories!',\n      act: 0,\n      index: '',\n      datas: []\n    }\n  } \n\n  componentDidMount(){\n    this.refs.name.focus();\n  }\n\n  fSubmit = (e) =>{\n    e.preventDefault();\n    console.log('try');\n\n    let datas = this.state.datas;\n    let name = this.refs.name.value;\n    let address = this.refs.address.value;\n\n    if(this.state.act === 0){   //new\n      let data = {\n        name, address\n      }\n      datas.push(data);\n    }else{                      //update\n      let index = this.state.index;\n      datas[index].name = name;\n      datas[index].address = address;\n    }    \n\n    this.setState({\n      datas: datas,\n      act: 0\n    });\n\n    this.refs.myForm.reset();\n    this.refs.name.focus();\n  }\n\n  fRemove = (i) => {\n    let datas = this.state.datas;\n    datas.splice(i,1);\n    this.setState({\n      datas: datas\n    });\n\n    this.refs.myForm.reset();\n    this.refs.name.focus();\n  }\n\n  fEdit = (i) => {\n    let data = this.state.datas[i];\n    this.refs.name.value = data.name;\n    this.refs.address.value = data.address;\n\n    this.setState({\n      act: 1,\n      index: i\n    });\n\n    this.refs.name.focus();\n  }  \n\n  render() {\n    let datas = this.state.datas;\n    return (\n      <div className=\"App\">\n        <h2>{this.state.title}</h2>\n        <form ref=\"myForm\" className=\"myForm\">\n          <input type=\"text\" ref=\"name\" placeholder=\"image url\" className=\"formField\" />\n          <input type=\"text\" ref=\"address\" placeholder=\"description\" className=\"formField\" />\n          <button onClick={(e)=>this.fSubmit(e)} className=\"myButton\">submit </button>\n        </form>\n        \n        <Container>\n         <Row md={3} sm={6}>\n          {datas.map((data, i) =>\n         \n         \n         <Col>\n            <li key={i} className=\"myList\">\n              \n                \n                  <Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"top\" src={data.name} fluid/> \n                 <Card.Body>\n                  <Card.Text>\n                  {data.address}\n                   </Card.Text>\n                </Card.Body> \n              <button onClick={()=>this.fRemove(i)} className=\"myListButton\">remove </button>\n              <button onClick={()=>this.fEdit(i)} className=\"myListButton\">edit </button>\n              </Card>\n              \n               \n            </li>\n            </Col>\n            \n                \n          )}\n        </Row>\n              </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}